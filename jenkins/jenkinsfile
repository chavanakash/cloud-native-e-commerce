pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'dockerizzz'
        DOCKER_CREDENTIALS = 'docker-hub-credentials'
        PATH = "/opt/homebrew/bin:${env.PATH}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', 
                          branches: [[name: '*/main']], 
                          userRemoteConfigs: [[
                              url: 'https://github.com/chavanakash/cloud-native-e-commerce.git',
                              credentialsId: 'github-creds'
                          ]]
                ])
                script {
                    env.GIT_COMMIT_SHORT = sh(
                        script: 'git rev-parse --short HEAD',
                        returnStdout: true
                    ).trim()
                    echo "Building commit: ${env.GIT_COMMIT_SHORT}"
                }
            }
        }

        stage('Install Dependencies') {
            parallel {
                backend: {
                    dir('backend') {
                        sh 'npm ci'
                    }
                }
                frontend: {
                    dir('frontend') {
                        sh 'npm ci'
                    }
                }
            }
        }

        stage('Build Docker Images') {
            parallel {
                backend: {
                    dir('backend') {
                        sh 'docker context use default'
                        sh """
                            docker build -t ${DOCKER_REGISTRY}/countryside-backend:${GIT_COMMIT_SHORT} .
                            docker build -t ${DOCKER_REGISTRY}/countryside-backend:latest .
                        """
                    }
                }
                frontend: {
                    dir('frontend') {
                        sh 'docker context use default'
                        sh """
                            docker build -t ${DOCKER_REGISTRY}/countryside-frontend:${GIT_COMMIT_SHORT} .
                            docker build -t ${DOCKER_REGISTRY}/countryside-frontend:latest .
                        """
                    }
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    docker.withRegistry('', DOCKER_CREDENTIALS) {
                        sh "docker push ${DOCKER_REGISTRY}/countryside-backend:${GIT_COMMIT_SHORT}"
                        sh "docker push ${DOCKER_REGISTRY}/countryside-backend:latest"
                        sh "docker push ${DOCKER_REGISTRY}/countryside-frontend:${GIT_COMMIT_SHORT}"
                        sh "docker push ${DOCKER_REGISTRY}/countryside-frontend:latest"
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                echo 'Deploying backend and frontend to Minikube...'
                sh '''
                    minikube kubectl -- apply -f k8s/mongodb-deployment.yaml
                    minikube kubectl -- apply -f k8s/backend-deployment.yaml
                    minikube kubectl -- apply -f k8s/frontend-deployment.yaml
                    minikube kubectl -- set image deployment/backend-deployment backend=dockerizzz/countryside-backend:${GIT_COMMIT_SHORT}
                    minikube kubectl -- set image deployment/frontend-deployment frontend=dockerizzz/countryside-frontend:${GIT_COMMIT_SHORT}
                    minikube kubectl -- rollout status deployment/backend-deployment
                    minikube kubectl -- rollout status deployment/frontend-deployment
                '''
            }
        }

        stage('Verify Deployment') {
            steps {
                sh """
                    minikube kubectl -- get pods
                    minikube kubectl -- get services
                    minikube kubectl -- get ingress
                """
            }
        }
    }
    
    post {
        always {
            sh 'docker system prune -af --volumes'
            archiveArtifacts artifacts: 'trivy-*.json', allowEmptyArchive: true
        }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
