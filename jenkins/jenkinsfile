pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'dockerizzz'
        DOCKER_CREDENTIALS = 'docker-hub-credentials'
        KUBECONFIG = credentials('kubeconfig-base64')
        // Removed SonarQube related environment variables
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    // Ensure the repo is cloned
                    checkout([$class: 'GitSCM', 
                              branches: [[name: '*/main']], 
                              userRemoteConfigs: [[url: 'https://github.com/your-username/countryside.com.git']]])
                    env.GIT_COMMIT_SHORT = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
                    echo "Building commit: ${env.GIT_COMMIT_SHORT}"
                }
            }
        }
        
        stage('Install Dependencies') {
            parallel {
                stage('Backend Dependencies') {
                    steps {
                        dir('backend') {
                            sh 'npm ci'
                        }
                    }
                }
                stage('Frontend Dependencies') {
                    steps {
                        dir('frontend') {
                            sh 'npm ci'
                        }
                    }
                }
            }
        }
        
        stage('Build Docker Images') {
            parallel {
                stage('Build Backend Image') {
                    steps {
                        dir('backend') {
                            script {
                                docker.build("${DOCKER_REGISTRY}/countryside-backend:${env.GIT_COMMIT_SHORT}")
                                docker.build("${DOCKER_REGISTRY}/countryside-backend:latest")
                            }
                        }
                    }
                }
                stage('Build Frontend Image') {
                    steps {
                        dir('frontend') {
                            script {
                                docker.build("${DOCKER_REGISTRY}/countryside-frontend:${env.GIT_COMMIT_SHORT}")
                                docker.build("${DOCKER_REGISTRY}/countryside-frontend:latest")
                            }
                        }
                    }
                }
            }
        }
        
        stage('Security Scan with Trivy') {
            parallel {
                stage('Scan Backend Image') {
                    steps {
                        sh """
                            trivy image --severity HIGH,CRITICAL \
                            --format json \
                            --output trivy-backend-report.json \
                            ${DOCKER_REGISTRY}/countryside-backend:${env.GIT_COMMIT_SHORT}
                        """
                        sh """
                            trivy image --severity HIGH,CRITICAL \
                            --exit-code 1 \
                            ${DOCKER_REGISTRY}/countryside-backend:${env.GIT_COMMIT_SHORT}
                        """
                    }
                }
                stage('Scan Frontend Image') {
                    steps {
                        sh """
                            trivy image --severity HIGH,CRITICAL \
                            --format json \
                            --output trivy-frontend-report.json \
                            ${DOCKER_REGISTRY}/countryside-frontend:${env.GIT_COMMIT_SHORT}
                        """
                        sh """
                            trivy image --severity HIGH,CRITICAL \
                            --exit-code 1 \
                            ${DOCKER_REGISTRY}/countryside-frontend:${env.GIT_COMMIT_SHORT}
                        """
                    }
                }
            }
        }
        
        stage('Push Docker Images') {
            steps {
                script {
                    docker.withRegistry('', DOCKER_CREDENTIALS) {
                        sh "docker push ${DOCKER_REGISTRY}/countryside-backend:${env.GIT_COMMIT_SHORT}"
                        sh "docker push ${DOCKER_REGISTRY}/countryside-backend:latest"
                        sh "docker push ${DOCKER_REGISTRY}/countryside-frontend:${env.GIT_COMMIT_SHORT}"
                        sh "docker push ${DOCKER_REGISTRY}/countryside-frontend:latest"
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh """
                        kubectl apply -f k8s/mongodb-deployment.yaml
                        kubectl apply -f k8s/backend-deployment.yaml
                        kubectl apply -f k8s/frontend-deployment.yaml
                        kubectl apply -f k8s/ingress.yaml
                        
                        kubectl set image deployment/backend-deployment \
                            backend=${DOCKER_REGISTRY}/countryside-backend:${env.GIT_COMMIT_SHORT}
                        
                        kubectl set image deployment/frontend-deployment \
                            frontend=${DOCKER_REGISTRY}/countryside-frontend:${env.GIT_COMMIT_SHORT}
                        
                        kubectl rollout status deployment/backend-deployment
                        kubectl rollout status deployment/frontend-deployment
                    """
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                sh """
                    kubectl get pods
                    kubectl get services
                    kubectl get ingress
                """
            }
        }
    }
    
    post {
        always {
            script {
                archiveArtifacts artifacts: 'trivy-*.json', allowEmptyArchive: true
                sh 'docker system prune -af --volumes'
            }
        }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
