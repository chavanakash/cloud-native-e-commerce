pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'dockerizzz'
        DOCKER_CREDENTIALS = 'docker-hub-credentials'
        PATH = "/opt/homebrew/bin:${env.PATH}"
        REPO_URL = 'https://github.com/chavanakash/cloud-native-e-commerce.git'
        BRANCH = 'main'
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    echo "üîÑ Checking out code from ${env.REPO_URL}..."
                    checkout([$class: 'GitSCM',
                        branches: [[name: "*/${env.BRANCH}"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'CleanCheckout']],
                        userRemoteConfigs: [[
                            url: "${env.REPO_URL}",
                            credentialsId: 'github-creds'
                        ]]
                    ])

                    sh 'git status'
                    sh 'ls -la'
                }
            }
        }

        stage('Verify Repo Structure') {
            steps {
                script {
                    echo "üß™ Verifying repo structure..."
                    sh '''
                        echo "üìÅ Workspace: $(pwd)"
                        echo "üî∏ Top-level files:"
                        ls -la
                        echo "üî∏ Full tree:"
                        ls -R
                    '''

                    if (!fileExists('backend/package.json')) {
                        error "‚ùå backend/package.json is missing! Check your repo structure or folder names."
                    }

                    if (!fileExists('frontend/package.json')) {
                        error "‚ùå frontend/package.json is missing! Check your repo structure or folder names."
                    }
                }
            }
        }

        stage('Install Backend Dependencies') {
            steps {
                dir('backend') {
                    sh 'npm ci --prefer-offline --no-audit'
                }
            }
        }

        stage('Install Frontend Dependencies') {
            steps {
                dir('frontend') {
                    sh 'npm ci --prefer-offline --no-audit'
                }
            }
        }

        stage('Build Docker Images') {
            parallel {
                stage('Backend Image') {
                    steps {
                        dir('backend') {
                            sh """
                                docker context use default || true
                                docker build -t ${env.DOCKER_REGISTRY}/countryside-backend:${env.GIT_COMMIT_SHORT} .
                                docker tag ${env.DOCKER_REGISTRY}/countryside-backend:${env.GIT_COMMIT_SHORT} ${env.DOCKER_REGISTRY}/countryside-backend:latest
                            """
                            echo "‚úÖ Backend image built successfully"
                        }
                    }
                }

                stage('Frontend Image') {
                    steps {
                        dir('frontend') {
                            sh """
                                docker context use default || true
                                docker build -t ${env.DOCKER_REGISTRY}/countryside-frontend:${env.GIT_COMMIT_SHORT} .
                                docker tag ${env.DOCKER_REGISTRY}/countryside-frontend:${env.GIT_COMMIT_SHORT} ${env.DOCKER_REGISTRY}/countryside-frontend:latest
                            """
                            echo "‚úÖ Frontend image built successfully"
                        }
                    }
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    docker.withRegistry("https://${env.DOCKER_REGISTRY}", env.DOCKER_CREDENTIALS) {
                        sh """
                            docker push ${env.DOCKER_REGISTRY}/countryside-backend:${env.GIT_COMMIT_SHORT}
                            docker push ${env.DOCKER_REGISTRY}/countryside-backend:latest
                            docker push ${env.DOCKER_REGISTRY}/countryside-frontend:${env.GIT_COMMIT_SHORT}
                            docker push ${env.DOCKER_REGISTRY}/countryside-frontend:latest
                        """
                        echo "‚úÖ Images pushed to Docker Hub successfully"
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo 'üöÄ Deploying to Kubernetes...'

                    def minikubeStatus = sh(returnStatus: true, script: 'minikube status > /dev/null 2>&1')
                    if (minikubeStatus != 0) {
                        echo "‚ö†Ô∏è Minikube not running. Starting..."
                        sh 'minikube start --memory=4096 --cpus=2'
                    }

                    sh """
                        minikube kubectl -- apply -f k8s/mongodb-deployment.yaml
                        minikube kubectl -- apply -f k8s/backend-deployment.yaml
                        minikube kubectl -- apply -f k8s/frontend-deployment.yaml

                        minikube kubectl -- set image deployment/backend-deployment \
                            backend=${env.DOCKER_REGISTRY}/countryside-backend:${env.GIT_COMMIT_SHORT}

                        minikube kubectl -- set image deployment/frontend-deployment \
                            frontend=${env.DOCKER_REGISTRY}/countryside-frontend:${env.GIT_COMMIT_SHORT}

                        echo "‚è≥ Waiting for deployments..."
                        minikube kubectl -- rollout status deployment/backend-deployment --timeout=300s
                        minikube kubectl -- rollout status deployment/frontend-deployment --timeout=300s
                    """

                    echo "‚úÖ Deployment completed successfully"
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    echo 'üîç Verifying deployment...'
                    sh '''
                        echo "=== Pods ==="
                        minikube kubectl -- get pods

                        echo "=== Services ==="
                        minikube kubectl -- get services

                        echo "=== Ingress ==="
                        minikube kubectl -- get ingress || echo "No ingress found"

                        echo "=== Deployments ==="
                        minikube kubectl -- get deployments
                    '''

                    def frontendUrl = sh(
                        script: 'minikube service frontend-service --url',
                        returnStdout: true
                    ).trim()

                    echo "üåê Application URL: ${frontendUrl}"
                }
            }
        }
    }

    post {
        always {
            echo 'üßπ Cleaning up workspace and Docker cache...'
            sh 'docker system prune -af --volumes || true'
            cleanWs()
        }
        success {
            echo "‚úÖ Pipeline executed successfully for commit: ${env.GIT_COMMIT_SHORT} üéâ"
        }
        failure {
            script {
                echo '‚ùå Pipeline failed! Fetching pod logs...'
                sh '''
                    minikube kubectl -- logs -l app=backend --tail=50 || true
                    minikube kubectl -- logs -l app=frontend --tail=50 || true
                '''
            }
        }
    }
}
