pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'dockerizzz'
        DOCKER_CREDENTIALS = 'docker-hub-credentials'
        SONAR_HOST = 'http://sonarqube:9000'
        SONAR_TOKEN = credentials('sonarqube-token')
        KUBECONFIG = credentials('kubeconfig')
        GIT_COMMIT_SHORT = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo "Building commit: ${GIT_COMMIT_SHORT}"
            }
        }
        
        stage('Install Dependencies') {
            parallel {
                stage('Backend Dependencies') {
                    steps {
                        dir('backend') {
                            sh 'npm ci'
                        }
                    }
                }
                stage('Frontend Dependencies') {
                    steps {
                        dir('frontend') {
                            sh 'npm ci'
                        }
                    }
                }
            }
        }
        
        stage('Code Quality Analysis') {
            parallel {
                stage('SonarQube - Backend') {
                    steps {
                        dir('backend') {
                            script {
                                def scannerHome = tool 'SonarScanner'
                                withSonarQubeEnv('SonarQube') {
                                    sh """
                                        ${scannerHome}/bin/sonar-scanner \
                                        -Dsonar.projectKey=ecommerce-backend \
                                        -Dsonar.sources=. \
                                        -Dsonar.host.url=${SONAR_HOST} \
                                        -Dsonar.login=${SONAR_TOKEN} \
                                        -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
                                    """
                                }
                            }
                        }
                    }
                }
                stage('SonarQube - Frontend') {
                    steps {
                        dir('frontend') {
                            script {
                                def scannerHome = tool 'SonarScanner'
                                withSonarQubeEnv('SonarQube') {
                                    sh """
                                        ${scannerHome}/bin/sonar-scanner \
                                        -Dsonar.projectKey=ecommerce-frontend \
                                        -Dsonar.sources=src \
                                        -Dsonar.host.url=${SONAR_HOST} \
                                        -Dsonar.login=${SONAR_TOKEN}
                                    """
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
        stage('Build Docker Images') {
            parallel {
                stage('Build Backend Image') {
                    steps {
                        dir('backend') {
                            script {
                                dockerImage = docker.build("${DOCKER_REGISTRY}/ecommerce-backend:${GIT_COMMIT_SHORT}")
                                docker.build("${DOCKER_REGISTRY}/ecommerce-backend:latest")
                            }
                        }
                    }
                }
                stage('Build Frontend Image') {
                    steps {
                        dir('frontend') {
                            script {
                                dockerImage = docker.build("${DOCKER_REGISTRY}/ecommerce-frontend:${GIT_COMMIT_SHORT}")
                                docker.build("${DOCKER_REGISTRY}/ecommerce-frontend:latest")
                            }
                        }
                    }
                }
            }
        }
        
        stage('Security Scan with Trivy') {
            parallel {
                stage('Scan Backend Image') {
                    steps {
                        sh """
                            trivy image --severity HIGH,CRITICAL \
                            --format json \
                            --output trivy-backend-report.json \
                            ${DOCKER_REGISTRY}/ecommerce-backend:${GIT_COMMIT_SHORT}
                        """
                        
                        sh """
                            trivy image --severity HIGH,CRITICAL \
                            --exit-code 1 \
                            ${DOCKER_REGISTRY}/ecommerce-backend:${GIT_COMMIT_SHORT}
                        """
                    }
                }
                stage('Scan Frontend Image') {
                    steps {
                        sh """
                            trivy image --severity HIGH,CRITICAL \
                            --format json \
                            --output trivy-frontend-report.json \
                            ${DOCKER_REGISTRY}/ecommerce-frontend:${GIT_COMMIT_SHORT}
                        """
                        
                        sh """
                            trivy image --severity HIGH,CRITICAL \
                            --exit-code 1 \
                            ${DOCKER_REGISTRY}/ecommerce-frontend:${GIT_COMMIT_SHORT}
                        """
                    }
                }
            }
        }
        
        stage('Push Docker Images') {
            steps {
                script {
                    docker.withRegistry('', DOCKER_CREDENTIALS) {
                        sh "docker push ${DOCKER_REGISTRY}/ecommerce-backend:${GIT_COMMIT_SHORT}"
                        sh "docker push ${DOCKER_REGISTRY}/ecommerce-backend:latest"
                        sh "docker push ${DOCKER_REGISTRY}/ecommerce-frontend:${GIT_COMMIT_SHORT}"
                        sh "docker push ${DOCKER_REGISTRY}/ecommerce-frontend:latest"
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh """
                        kubectl apply -f k8s/mongodb-deployment.yaml
                        kubectl apply -f k8s/backend-deployment.yaml
                        kubectl apply -f k8s/frontend-deployment.yaml
                        kubectl apply -f k8s/ingress.yaml
                        
                        kubectl set image deployment/backend-deployment \
                            backend=${DOCKER_REGISTRY}/ecommerce-backend:${GIT_COMMIT_SHORT}
                        
                        kubectl set image deployment/frontend-deployment \
                            frontend=${DOCKER_REGISTRY}/ecommerce-frontend:${GIT_COMMIT_SHORT}
                        
                        kubectl rollout status deployment/backend-deployment
                        kubectl rollout status deployment/frontend-deployment
                    """
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                sh """
                    kubectl get pods
                    kubectl get services
                    kubectl get ingress
                """
            }
        }
    }
    
    post {
        always {
            // Archive reports
            archiveArtifacts artifacts: 'trivy-*.json', allowEmptyArchive: true
            
            // Clean up
            sh 'docker system prune -af --volumes'
        }
        success {
            echo 'Pipeline executed successfully!'
            // Send notification (Slack, Email, etc.)
        }
        failure {
            echo 'Pipeline failed!'
            // Send failure notification
        }
    }
}